package com.example.Project33;

import javafx.beans.binding.Bindings;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import rubank.*;

import java.time.format.DateTimeFormatter;

/**
 *Controller class for Bank Teller fxml view.
 *
 * @author Seif Mamdouh
 */
public class TransactionManagerController {
    @FXML
    private TextField ocFirstName;
    @FXML
    private TextField ocLastName;
    @FXML
    private DatePicker ocDOB;
    @FXML
    private ToggleGroup accountType;
    @FXML
    private TextArea initialDeposit;
    @FXML
    private Button openButton;
    @FXML
    private Button closeButton;
    @FXML
    private ToggleGroup campusCode;
    @FXML
    private RadioButton collegeCheckingsToggle;
    @FXML
    private RadioButton savingsToggle;
    @FXML
    private RadioButton moneyMarketToggle;
    @FXML
    private CheckBox loyaltyCheck;
    @FXML
    private RadioButton camdenChoose;
    @FXML
    private RadioButton newarkChoose;
    @FXML
    private RadioButton nbChoose;
    @FXML
    private TextArea ocDisplayArea;
    @FXML
    private TextField dwFirstName;
    @FXML
    private TextField dwLastName;
    @FXML
    private DatePicker dwDOB;
    @FXML
    private ToggleGroup accountType1;
    @FXML
    private Button depositButton;
    @FXML
    private Button withdrawButton;
    @FXML
    private TextField transactionAmount;
    @FXML
    private TextArea dwDisplayArea;
    @FXML
    private TextArea dataDisplayArea;
    @FXML
    private RadioButton currOrder;
    @FXML
    private RadioButton accTypeOrder;
    @FXML
    private RadioButton feesAndInterest;
    @FXML
    private RadioButton updatedBalances;

    /**
     * Database to be used by controller.
     */
    private AccountDatabase db = new AccountDatabase();

    /**
     * Default constructor generated by compiler.
     */
    public TransactionManagerController() {}

    /**
     * Sets all the listeners on TextFields to prevent invalid input, and disables buttons
     * unless necessary fields are filled out.
     */
    public void initialize() {
        openButton.disableProperty().bind(
                Bindings.isEmpty(ocFirstName.textProperty())
                        .or(Bindings.isEmpty(ocLastName.textProperty()))
                        .or(Bindings.isEmpty(initialDeposit.textProperty()))
                        .or(Bindings.isNull(ocDOB.valueProperty()))
        );

        closeButton.disableProperty().bind(
                Bindings.isEmpty(ocFirstName.textProperty())
                        .or(Bindings.isEmpty(ocLastName.textProperty()))
                        .or(Bindings.isNull(ocDOB.valueProperty()))
        );

        depositButton.disableProperty().bind(
                Bindings.isEmpty(dwFirstName.textProperty())
                        .or(Bindings.isEmpty(dwLastName.textProperty()))
                        .or(Bindings.isEmpty(transactionAmount.textProperty()))
                        .or(Bindings.isNull(dwDOB.valueProperty()))
        );

        withdrawButton.disableProperty().bind(
                Bindings.isEmpty(dwFirstName.textProperty())
                        .or(Bindings.isEmpty(dwLastName.textProperty()))
                        .or(Bindings.isEmpty(transactionAmount.textProperty()))
                        .or(Bindings.isNull(dwDOB.valueProperty()))
        );

        /* Listeners to disable / enable campus codes and loyalty appropriately*/
        collegeCheckingsToggle.selectedProperty().addListener((obs, wasSelected, isSelected) -> {
            if (isSelected) {
                camdenChoose.setDisable(false);
                newarkChoose.setDisable(false);
                nbChoose.setDisable(false);
            } else {
                camdenChoose.setDisable(true);
                newarkChoose.setDisable(true);
                nbChoose.setDisable(true);
            }
        });

        savingsToggle.selectedProperty().addListener((obs, wasSelected, isSelected) -> {
            loyaltyCheck.setDisable(!isSelected);
        });


        moneyMarketToggle.selectedProperty().addListener((obs, wasSelected, isSelected) -> {
            loyaltyCheck.setSelected(isSelected);
        });

        /* Listeners to make sure only letters and digits can be input into respective fields*/
        initialDeposit.textProperty().addListener((obs, oldValue, newValue) -> {
            if (!newValue.matches("\\d+\\.\\d+")) {
                initialDeposit.setText(newValue.replaceAll("[^.\\d]", ""));
            }
        });

        transactionAmount.textProperty().addListener((obs, oldValue, newValue) -> {
            if (!newValue.matches("\\d+\\.\\d+")) {
                transactionAmount.setText(newValue.replaceAll("[^.\\d]", ""));
            }
        });

        ocFirstName.textProperty().addListener((obs, oldValue, newValue) -> {
            if (!newValue.matches("\\sa-zA-Z*")) {
                ocFirstName.setText(newValue.replaceAll("[^\\sa-zA-Z]", ""));
            }
        });

        ocLastName.textProperty().addListener((obs, oldValue, newValue) -> {
            if (!newValue.matches("\\sa-zA-Z*")) {
                ocLastName.setText(newValue.replaceAll("[^\\sa-zA-Z]", ""));
            }
        });

        dwFirstName.textProperty().addListener((obs, oldValue, newValue) -> {
            if (!newValue.matches("\\sa-zA-Z*")) {
                dwFirstName.setText(newValue.replaceAll("[^\\sa-zA-Z]", ""));
            }
        });

        dwLastName.textProperty().addListener((obs, oldValue, newValue) -> {
            if (!newValue.matches("\\sa-zA-Z*")) {
                dwLastName.setText(newValue.replaceAll("[^\\sa-zA-Z]", ""));
            }
        });
    }

    /*Helper Validation methods*/

    /**
     * Takes a string of the default date string value and change it to the proper format for our the Date class
     * @param date the string equivalent
     * @return A string representing the date in the format "mm/dd/yyyy"
     */
    private String formatter(String date)
    {
        String[] formatting = date.split("-");
        String dob = formatting[1] + "/" + formatting[2] + "/" + formatting[0];
        return dob;
    }

    /*On Action Methods for buttons*/

    /**
     * Handles opening account after validating date data and initial deposit amount.
     * Changes the TextArea based on the result of trying to open account.
     */
    @FXML
    private void openButtonClicked(ActionEvent actionEvent) {
        String first = ocFirstName.getText();
        String last = ocLastName.getText();
        String dob = formatter(String.valueOf(ocDOB.getValue()));

        Profile profile = createProfile(first, last, dob);
        if (profile == null) return;

        double deposit;
        try {
            deposit = Double.parseDouble(initialDeposit.getText().trim());
        } catch (NumberFormatException e) {
            ocDisplayArea.setText("Invalid formatting of decimal.");
            return;
        }

        if (deposit == 0) {
            ocDisplayArea.setText("Initial deposit cannot be 0.");
            return;
        }
        if (moneyMarketToggle.isSelected() && deposit < MoneyMarket.MIN_OPEN_AMT) {
            ocDisplayArea.setText("Minimum of $2500 to open a MoneyMarket account.");
            return;
        }

        Account account = createAccount(profile, deposit, false);

        boolean exists = db.isInDatabaseAlready(account);
        boolean opened = db.open(account);
        if (!opened) {
            ocDisplayArea.setText(profile + " same account(type) is in the database.");
        } else {
            ocDisplayArea.setText("Account ");
            if (exists) ocDisplayArea.appendText("re");
            ocDisplayArea.appendText("opened.");
        }
    }

    /**
     * Handles closing account. Changes TextArea to notify if closing account was
     * successful or not.
     */
    @FXML
    private void closeButtonClicked(ActionEvent actionEvent) {
        String first = ocFirstName.getText();
        String last = ocLastName.getText();
        String dob = formatter(String.valueOf(ocDOB.getValue()));

        Profile profile = createProfile(first, last, dob);
        if (profile == null) return;

        Account account = createAccount(profile, 0, false);

        boolean closed = db.close(account);

        boolean exists = db.isInDatabaseAlready(account);

        if (!exists) {
            ocDisplayArea.setText("This account isn't in the database.");
            return;
        }

        ocDisplayArea.setText("Account ");
        if (!closed) ocDisplayArea.appendText("is ");
        ocDisplayArea.appendText("closed");
        if (!closed) ocDisplayArea.appendText(" already");
        ocDisplayArea.appendText(".");
    }

    /**
     * Handles deposit, validating profile and amount. Updates TextArea with information
     * on success or failure of deposit.
     */
    @FXML
    private void depositButtonClicked(ActionEvent actionEvent) {
        String first = dwFirstName.getText();
        String last = dwLastName.getText();
        String dob = formatter(String.valueOf(dwDOB.getValue()));
        Profile profile = createProfile(first, last, dob);
        if (profile == null) return;

        double amount;
        try {
            amount = Double.parseDouble(transactionAmount.getText().trim());
        } catch (NumberFormatException e) {
            dwDisplayArea.setText("Invalid formatting of decimal.");
            return;
        }
        if (amount == 0) {
            dwDisplayArea.setText("Deposit - amount cannot be 0.");
            return;
        }

        Account account = createAccount(profile, amount, true);

        boolean exists = db.isInDatabaseAlready(account);
        if (exists) {
            if(db.checkStatus(account))
            {
                dwDisplayArea.setText("Cannot deposit into a closed account.");
            }
            else {
                db.deposit(account);
                dwDisplayArea.setText("Deposit - balance updated.");
            }
        } else {
            dwDisplayArea.setText(account.getHolder() + " " + account.getType() + " is not in the database.");
        }
    }

    /**
     * Handles withdraw, validating profil and amount. Updates TextArea with information
     * on success or failure of withdraw.
     */
    @FXML
    private void withdrawButtonClicked(ActionEvent actionEvent) {
        String first = dwFirstName.getText();
        String last = dwLastName.getText();
        String dob = formatter(String.valueOf(dwDOB.getValue()));
        Profile profile = createProfile(first, last, dob);
        if (profile == null) return;

        double amount;
        try {
            amount = Double.parseDouble(transactionAmount.getText().trim());
        } catch (NumberFormatException e) {
            dwDisplayArea.setText("Invalid formatting of decimal.");
            return;
        }
        if (amount == 0) {
            dwDisplayArea.setText("Withdrawal - amount cannot be 0.");
            return;
        }

        Account account = createAccount(profile, amount, true);

        boolean exists = db.isInDatabaseAlready(account);
        if (exists) {
            if(db.checkStatus(account))
            {
                dwDisplayArea.setText("Cannot withdrawal from a closed account.");
            }
            else
            {
                dwDisplayArea.setText("Withdraw - ");
                boolean success = db.withdraw(account);

                if (success) dwDisplayArea.appendText("balance updated.");
                else dwDisplayArea.appendText("insufficient fund.");
            }
        } else {
            dwDisplayArea.setText(account.getHolder() + " " + account.getType() + " is not in the database.");
        }
    }

    /**
     * Handles display click. Displays database list according to selected RadioButton.
     */
    @FXML
    private void displayButtonClicked(ActionEvent actionEvent) {
        String toDisplay = null;
        if (db.getNumAcct() == 0) {
            toDisplay = "Account Database is empty!\n";
            dataDisplayArea.setText(toDisplay);
            return;
        }

        toDisplay = "\n*list of accounts ";
        if (currOrder.isSelected()) {
            toDisplay += " in the database*\n";
            toDisplay += db.print();
        } else if (accTypeOrder.isSelected()) {
            toDisplay += db.printByAccountType();
        } else if (feesAndInterest.isSelected()) {
            toDisplay += db.printFeeAndInterest();
        } else if (updatedBalances.isSelected()) {
            toDisplay += db.updateBalances();
        }

        toDisplay += "*end of list*\n";
        dataDisplayArea.setText(toDisplay);
    }

    /**
     * Returns instance of Profile after verifying valid DOB.
     * @return Profile instance using given fname, lname, and DOB; null if invalid DOB
     */
    private Profile createProfile(String first, String last, String dob) {
        Date DOB   = new Date(dob);
        Date today = new Date();
        boolean validDOB = DOB.compareTo(today) < 0;
        if (!validDOB) {
            ocDisplayArea.setText("Date of birth invalid.");
            return null;
        }

        first = first.trim();
        last = last.trim();

        return new Profile(first, last, DOB);
    }

    /**
     * Returns instance of Account using given profile and balance.
     * @param profile profile to be used as holder for account
     * @param balance balance in account
     * @param forTransaction flag if used for deposit/withdraw or open/close
     * @return instance of Account
     */
    private Account createAccount(Profile profile, double balance, boolean forTransaction) {
        RadioButton selectedType;
        if (forTransaction) {
            selectedType = (RadioButton) accountType1.getSelectedToggle();
        } else {
            selectedType = (RadioButton) accountType.getSelectedToggle();
        }
        String accountType = selectedType.getText();

        if (accountType.equals("Checkings")) {
            return new Checking(profile, balance);
        } else if (accountType.equals("College Checkings")) {
            RadioButton selectedCampus = (RadioButton) campusCode.getSelectedToggle();
            int campus = campusCode.getToggles().indexOf(selectedCampus);
            return new CollegeChecking(profile, balance, campus);
        } else if (accountType.equals("Savings")) {
            return new Savings(profile, balance, loyaltyCheck.isSelected());
        } else {
            return new MoneyMarket(profile, balance, true);
        }

    }
}